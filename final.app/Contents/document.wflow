<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>528</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/bin/bash

# GitHub MCP Server Installer - Automator Version (Simplified)
set -e

# Configuration
REPO="github/github-mcp-server"
INSTALL_DIR="/usr/local/bin"

# Simple dialog functions
ask_yes_no() {
    local message="$1"
    osascript -e "button returned of (display dialog \"$message\" buttons {\"No\", \"Yes\"} default button \"Yes\")"
}

ask_text() {
    local message="$1"
    local default="$2"
    osascript -e "text returned of (display dialog \"$message\" default answer \"$default\")"
}

show_message() {
    local message="$1"
    osascript -e "display dialog \"$message\" with title \"GitHub MCP Installer\" buttons {\"OK\"} default button \"OK\""
}

show_error() {
    local message="$1"
    osascript -e "display dialog \"Error: $message\" with title \"GitHub MCP Installer\" buttons {\"OK\"} default button \"OK\" with icon stop"
    exit 1
}

# Welcome message
show_message "GitHub MCP Server Installer

This will install the GitHub MCP Server for Claude Desktop.

The installer will:
- Download the latest version
- Install to /usr/local/bin  
- Configure Claude Desktop
- Request admin password when needed"

# Detect architecture
ARCH=$(uname -m)
if [ "$ARCH" = "x86_64" ]; then
    ARCH_SUFFIX="x86_64"
    ARCH_NAME="Intel Mac"
elif [ "$ARCH" = "arm64" ]; then
    ARCH_SUFFIX="arm64"
    ARCH_NAME="Apple Silicon Mac"
else
    show_error "Unsupported architecture: $ARCH"
fi

# Check if already installed
if [ -x "$INSTALL_DIR/github-mcp-server" ]; then
    response=$(ask_yes_no "GitHub MCP Server is already installed. Do you want to reinstall/update?")
    if [ "$response" != "Yes" ]; then
        exit 0
    fi
fi

# Confirm installation
response=$(ask_yes_no "Detected: $ARCH_NAME

This will install GitHub MCP Server to $INSTALL_DIR

Continue with installation?")
if [ "$response" != "Yes" ]; then
    exit 0
fi

# Get latest version info
DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | grep "browser_download_url.*Darwin_${ARCH_SUFFIX}.tar.gz" | head -1 | sed 's/.*"browser_download_url": "\(.*\)".*/\1/')

VERSION=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | grep '"tag_name":' | sed 's/.*"tag_name": "\(.*\)".*/\1/')

if [ -z "$DOWNLOAD_URL" ]; then
    show_error "Failed to find download URL for your architecture"
fi

show_message "Found version: $VERSION

Starting download..."

# Create temp directory
TEMP_DIR=$(mktemp -d)
cleanup() {
    rm -rf "$TEMP_DIR"
}
trap cleanup EXIT

# Download
curl -L -o "$TEMP_DIR/github-mcp-server.tar.gz" "$DOWNLOAD_URL" || show_error "Download failed"

# Extract
tar -xzf "$TEMP_DIR/github-mcp-server.tar.gz" -C "$TEMP_DIR" || show_error "Extraction failed"

# Find the binary
BINARY=""
for file in "$TEMP_DIR"/* "$TEMP_DIR"/*/*; do
    if [ -f "$file" ] &amp;&amp; [ "$(basename "$file")" = "github-mcp-server" ]; then
        BINARY="$file"
        break
    fi
done

if [ -z "$BINARY" ]; then
    show_error "Binary not found in downloaded archive"
fi

# Install with admin privileges
osascript -e "do shell script \"mkdir -p '$INSTALL_DIR' &amp;&amp; cp '$BINARY' '$INSTALL_DIR/github-mcp-server' &amp;&amp; chmod +x '$INSTALL_DIR/github-mcp-server'\" with administrator privileges" || show_error "Installation failed"

# Verify installation
if [ ! -x "$INSTALL_DIR/github-mcp-server" ]; then
    show_error "Installation verification failed"
fi

show_message "Installation successful!

GitHub MCP Server $VERSION has been installed."

# Ask about GitHub token
response=$(ask_yes_no "Do you have a GitHub Personal Access Token?

This is required for the GitHub MCP Server to work.
You can create one at: https://github.com/settings/tokens")

CONFIG_FILE="$HOME/Library/Application Support/Claude/claude_desktop_config.json"

if [ "$response" = "Yes" ]; then
    # Get GitHub token
    GITHUB_TOKEN=$(ask_text "Enter your GitHub Personal Access Token:" "")
    
    if [ -n "$GITHUB_TOKEN" ]; then
        # Create config directory
        mkdir -p "$(dirname "$CONFIG_FILE")"
        
        # Backup existing config if it exists
        if [ -f "$CONFIG_FILE" ]; then
            cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Try to read existing config and merge, or create new one
        if [ -f "$CONFIG_FILE" ]; then
            # Use Python to safely merge JSON (most Macs have Python)
            python3 &lt;&lt; EOF
import json
import os

config_file = "$CONFIG_FILE"
token = "$GITHUB_TOKEN"

try:
    with open(config_file, 'r') as f:
        config = json.load(f)
except:
    config = {}

if 'mcpServers' not in config:
    config['mcpServers'] = {}

config['mcpServers']['github'] = {
    "command": "/usr/local/bin/github-mcp-server",
    "args": ["stdio"],
    "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": token
    }
}

with open(config_file, 'w') as f:
    json.dump(config, f, indent=2)
EOF
        else
            # Create new config file
            cat &gt; "$CONFIG_FILE" &lt;&lt; 'EOF'
{
  "mcpServers": {
    "github": {
      "command": "/usr/local/bin/github-mcp-server",
      "args": ["stdio"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "PLACEHOLDER_TOKEN"
      }
    }
  }
}
EOF
            # Replace placeholder with actual token
            sed -i '' "s/PLACEHOLDER_TOKEN/$GITHUB_TOKEN/g" "$CONFIG_FILE"
        fi
        
        show_message "Installation Complete! ✅

GitHub MCP Server $VERSION has been installed and configured.

⚠️ IMPORTANT: Please restart Claude Desktop for the changes to take effect.

The GitHub MCP Server is now ready to use!"
    else
        show_message "Installation Complete! ⚠️

GitHub MCP Server $VERSION has been installed but NOT configured.

To complete setup:
1. Get a GitHub Personal Access Token from:
   https://github.com/settings/tokens
2. Add it to your Claude Desktop configuration
3. Restart Claude Desktop"
    fi
else
    show_message "Installation Complete! ⚠️

GitHub MCP Server $VERSION has been installed but NOT configured.

To complete setup:
1. Create a GitHub Personal Access Token at:
   https://github.com/settings/tokens
2. Configure Claude Desktop manually
3. Restart Claude Desktop

Instructions: https://github.com/github/github-mcp-server"
fi</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>1</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>26B3014B-1145-4383-ADEF-08AD8409DC29</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>0B0C0618-DDD4-4316-9125-02CE4BA92CE2</string>
				<key>UUID</key>
				<string>D5629FF5-B458-401A-AA58-CCE2DC8A9DBC</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>309.000000:252.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
